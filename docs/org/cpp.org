# -*- org -*-
# -*- coding:utf-8 -*-

# Time-stamp: <2016-07-23 16:38:11 (mykulou@gmail.com)>
#+SETUPFILE: theme-bigblow-local.setup

* C++
** 导论
***   1. 程序设计范型
- 类型检查、歧义性检查、运行时检查都是对某种范型的语言支持
- 语言之外（库和程序设计环境），也能进一步支持
- 最重要的问题不在于某个语言拥有多少特征，而在于它的特征是否足以
  在某个希望的应用领域中支持某种希望的程序设计风格：
  - 美学和逻辑
  - 最小化
  - 你不知道的东西不会伤害你
***   2. 过程式程序设计（过程+算法）
1. 变量和算术
2. 检测和循环（结构控制）
3. 指针和数组
***   3. 模块程序设计（模块+隐藏）
1. 分别编译
   - 编写时，逻辑地表示模块化；编译时，物理地利用模块化机制
2. 异常处理（哪个模块的责任）
***   4. 数据抽象
1. 定义类型的模块（数据+操作）
2. 用户定义类型(ADT)（类型+操作）
3. 具体类型
4. 抽象类型（虚函数多态）
5. 虚函数（vtbl+下标）
   - 每个有虚函数的类都有标识着它的所有虚函数的vtbl，
   - 开销：每个对象一个指针，指向类中的vtbl
*** 5. OO（继承+多态）
1. 类层次结构
   - 继承机制和虚函数表示共性
   - 类层次结构和抽象类互为补充
***   6. 通用型程序设计
1. 容器（模板）
   - 模板是编译时机制，不引起额外的运行时开销
2. 通用型算法
   - 通过迭代器操作序列的观念
** 标准库
***   1. 输入输出
***   2. 字符串
***   3. 容器
- vector、list、map、set、stack、queue、deque。。
- vector没有范围检查
***   4. 算法
- 数据结构+访问操作+排序检索+常用算法
  #+begin_src c++
unique_copy(ve.begin(), ve.end(), back_insertor(le));	//附到le之后，自动扩充容器
  #+end_src
- 迭代器和I/O
  - istream_iterator/ostream_iterator并不是提供人们直接使用的，
    主要是为了给算法提供参数
- 遍历和谓词
  - for_each、find_if、count_if
- 使用成员函数的算法
  - mem_fun机制，使各种标准算法能够被应用于保存多态对象的容器
  #+begin_src c++
for_each(sh.begin(), sh.end(), mem_fun(&Shape::draw));	//使用成员函数的算法
  #+end_src
- 标准库算法
  - for_each、find、count、replace、copy、sort、merge、
    unique_copy、equal_range
***   5. 数学
1. 复数complex
2. 向量算术valarray
3. 基本数值支持
***   6. 标准库功能
1. 基本运行支持（存储分配、运行时类型信息等）
2. C标准库
3. 字符串和I/O流（国际化、本地化）
4. 容器和使用容器的算法（遍历、排序和归并等）的框架
5. 对数值计算的支持
** 类型和声明
*** 基本类型
- =布尔 字符 整数 浮点 枚举 void=
- =指针 数组 引用 数据结构和类=
- char是否有符号，由实现决定（移植问题）
- wchar_t的大小，由实现决定
- unsigned会被隐含的类型转换规则破坏
- 单、双和扩展精度的确切意义由实现确定
- 枚举不允许隐式地从整数转换（枚举的范围问题）
  #+begin_src c++
wchar_t 	wc=L'ab';
unsigned 	ui=3U;
long 		li=3L;
float		f = .23F;
double 	d = 1.;
long double ld = 2.9e-3L;
enum flag ={x=1, y=2, z=4, e=8};	//范围:0-15
flag f1 =flag(5);
flag f2 =flag(z|e);		//12在范围内
  #+end_src
*** 声明
- 没有办法使用被屏蔽的局部名字
- 如果没有提供初始式，静态对象（全局、名字空间、局部静态的对象）
  将会被自动初始化为适当类型的0；局部对象（自动对象）和在自由存储
  区里建立的对象（动态对象/堆对象）将不会默认初始化。
** 指针、数组和结构
- 以*为划分，左边是指针的内容，右边是指针。
- 引用的主要用途是为了描述函数的参数和返回值，特别是为了运算符的重
  载
- 到函数的和到成员的指针都不能赋给void*
** 表达式和语句
* [[file:index.html][wiki]]
