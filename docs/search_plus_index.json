{"./":{"url":"./","title":"简介","keywords":"","body":"工作日志 walker.zheng mykulou@gmail.com 子 吾日三省吾身 If you sexy then flaunt it, If you freaky then own it. 目录 Copyright © walker.zheng 2017 all right reserved，powered by Gitbook最近修改: 2017-10-10 16:05:16 "},"SUMMARY.html":{"url":"SUMMARY.html","title":"目录","keywords":"","body":"SUMMARY 简介 目录 code faq Gif图 git iptv markdown python速查 sourcetree work 工具 工作截图 计划 配置 图解 一天学会 Copyright © walker.zheng 2017 all right reserved，powered by Gitbook最近修改: 2017-10-10 16:05:33 "},"code.html":{"url":"code.html","title":"code","keywords":"","body":"代码片段 json 例子 {% raw %} using nlohmann::json; namespace ns { void to_json(json& j, const person& p) { j = json{ {\"name\", p.name}, {\"address\", p.address}, {\"age\", p.age} }; } void from_json(const json& j, person& p) { p.name = j.at(\"name\").get(); p.address = j.at(\"address\").get(); p.age = j.at(\"age\").get(); } } // namespace ns {% endraw %} json & redis 转换 hmset/hgetall(非数组) to_redis std::list to_redis(nlohmann::json const & value, std::string const & pref) { std::list args; auto prefix = pref; if (value.is_object()) { if (!prefix.empty()) { prefix += \".\"; } for (auto elem = value.begin(); elem != value.end(); ++elem) { if ((*elem).is_object()) { auto keyvalue = to_redis(*elem, prefix + elem.key()); std::copy(keyvalue.begin(), keyvalue.end(), std::back_inserter(args)); } else if ((*elem).is_array()) { logger.error(u8\"to_redis 不支持 json array\"); // auto keyvalue = to_redis(*elem, prefix + elem.key()); // std::copy(keyvalue.begin(), keyvalue.end(), std::back_inserter(args)); } else if ((*elem).is_number()) { args.push_back(prefix + elem.key()); int64_t num = elem.value(); args.push_back(std::to_string(num)); } else if ((*elem).is_string()) { args.push_back(prefix + elem.key()); args.push_back(elem.value()); } else if ((*elem).is_boolean()) { args.push_back(prefix + elem.key()); auto boolean = elem.value(); if (boolean) { args.push_back(\"true\"); } else { args.push_back(\"false\"); } } } } return args; } from_redis nlohmann::json from_redis(std::vector const & values) { nlohmann::json data; if (!(values.size() % 2)) { for (auto i = 0; i + 1 to_lower std::string tolower(const std::string & data) { std::string tmp(data); std::transform(data.begin(), data.end(), tmp.begin(), (int(*)(int))std::tolower); return tmp; } to_upper std::string toupper(const std::string & data) { std::string tmp(data); std::transform(data.begin(), data.end(), tmp.begin(), (int(*)(int))std::toupper); return tmp; } join std::string join(const std::vector & s, const std::string & token) { size_t count{ 0 }; std::string tmp; for (const auto & str : s) { count++; tmp += str; if (count != s.size()) { tmp += token; } } return tmp; } trim std::string trimDir(const std::string & s, char ch) { return std::string(s.begin(), std::find_if(s.rbegin(), s.rend(), [ = ](int c) {return ch == c; }).base()); } std::string trim(const std::string & s, char ch) { return std::string(std::find_if_not(s.begin(), s.end(), [ = ](int c) {return ch == c; }), std::find_if_not(s.rbegin(), s.rend(), [ = ](int c) {return ch == c; }).base()); } std::string trim(const std::string & s) { return trim(s, ' '); } split std::vector split(const std::string & s, char delim) { std::stringstream ss(s); std::string item; std::vector elems; while (std::getline(ss, item, delim)) { elems.push_back(item); } return elems; } Copyright © walker.zheng 2017 all right reserved，powered by Gitbook最近修改: 2017-10-10 16:05:16 "},"faq.html":{"url":"faq.html","title":"faq","keywords":"","body":"c++/cli 1. String^ 与 char* //将char*转换为System::String^ String^ str1= System::Runtime::InteropServices::Marshal::PtrToStringAnsi((IntPtr)ch1); //System::String^转换为char* char* ch2 = (char*)(void*)System::Runtime::InteropServices::Marshal::StringToHGlobalAnsi(str1); 2. native回调转托管 #pragma unmanaged typedef int (__stdcall *pMK_Notify_CB)(char *ipAddr, NET_MSG_NOTETYPE_E MsgType, NET_MSG_NOTEINFO *UploadMsg, void *pUserdata); #pragma managed public delegate int GetNofiyDelegate(char *ipAddr, NET_MSG_NOTETYPE_E MsgType, NET_MSG_NOTEINFO *UploadMsg, void *pUserdata); // decl pMK_Notify_CB m_cb; static GCHandle gch; static GetNofiyDelegate^ fp; // init CheckForIllegalCrossThreadCalls = false; fp = gcnew GetNofiyDelegate(GetNotifyMSG); gch = GCHandle::Alloc(fp); IntPtr ip = Marshal::GetFunctionPointerForDelegate(fp); m_cb = static_cast(ip.ToPointer()); fp_up = gcnew GetUpgradeDelegate(GetUpgradeMSG); 3. 编码转换 System::Text::Encoding::Default->GetBytes(sFullPath) 4. 打开文件 OpenFileDialog^ openFileDialog1 = gcnew OpenFileDialog; openFileDialog1->InitialDirectory = \"c:\\\\\"; openFileDialog1->Filter = \"upf files (*.upf)|*.upf|All files (*.*)|*.*\"; openFileDialog1->FilterIndex = 1; openFileDialog1->RestoreDirectory = true; if ( openFileDialog1->ShowDialog() == System::Windows::Forms::DialogResult::OK ) { String ^ sFullPath = openFileDialog1->FileName; if (sFullPath->Substring(sFullPath->LastIndexOf(\".\"))->Equals(\".upf\")) { size_t pos =0; sFullPath = sFullPath->Replace(L\"\\\\\", L\"\\\\\\\\\"); } } 5. 绑定数据显示 private: System::Windows::Forms::DataGridView^ dataGridView2; System::Collections::Generic::List^ >^ listDevSearched; System::Collections::Generic::List^ >^ listDevAdded; System::Data::DataTable ^ dataTable1; System::Data::DataTable ^ dataTable2; this->dataGridView2->DataSource = nullptr; this->listDevAdded->Clear(); this->dataTable2->Rows->Clear(); this->dataTable2->Columns->Clear(); this->dataTable2->Columns->Add(\"*addr\"); this->dataTable2->Columns->Add(\"*IP\"); array^ strTmpDev = gcnew array(2); strTmpDev[0] = gcnew String(\"\" + cfgDevCheck[i].base.addr); strTmpDev[1] = gcnew String((char *)cfgDevCheck[i].ex.linkIP); this->listDevAdded->Add(strTmpDev); for each(array^ devInfo in this->listDevAdded) { DataRow^ newRow = this->dataTable2->NewRow(); newRow[0] = devInfo[0]; newRow[1] = devInfo[1]; this->dataTable2->Rows->Add(newRow); } this->dataGridView2->DataSource = this->dataTable2; // 获取 this->dataGridView1->CurrentRow->Cells[0]->Value->ToString(); c++ socket 1. 广播搜索 SOCKADDR_IN servAddr; servAddr.sin_family = AF_INET; servAddr.sin_addr.S_un.S_addr = htonl(INADDR_BROADCAST); servAddr.sin_port = htons(5555); int addrLen = sizeof(servAddr); m_cSocket_DevSearch.socket_open(); m_cSocket_DevSearch.socket_create(AF_INET,SOCK_DGRAM,IPPROTO_UDP); m_cSocket_DevSearch.socket_setblocking(); m_cSocket_DevSearch.socket_setsockopt(SOL_SOCKET,SO_BROADCAST,(char*)&optval,sizeof(bool)); int iConnectRet = m_cSocket_DevSearch.socket_bind((SOCKADDR*)&servAddr,sizeof(servAddr)); m_cSocket_DevSearch.socket_sendto(&SearchDeviceMsg[0], iHeaderLen, &iSendSize, (SOCKADDR*)&servAddr, addrLen); while() { m_cSocket_DevSearch.socket_recvfrom(recvBuf, sizeof(recvBuf), &iSendSize, (SOCKADDR*)&servAddr, &addrLen); } Copyright © walker.zheng 2017 all right reserved，powered by Gitbook最近修改: 2017-10-10 16:05:16 "},"Gif图.html":{"url":"Gif图.html","title":"Gif图","keywords":"","body":"Gif 测试 Copyright © walker.zheng 2017 all right reserved，powered by Gitbook最近修改: 2017-10-10 16:05:16 "},"git.html":{"url":"git.html","title":"git","keywords":"","body":"Git & gitflow 命令 git子树合并和拆分 引入外部版本库 # 准备库 git --git-dir=/path/to/util.git init --bare git --git-dir=/path/to/main.git init --bare # 本地检出 git clone /path/to/util.git git clone /path/to/main.git # 注册远程版本库，&fetch git remote add util /path/to/util.git git remote -v git fetch util # 检出为分支 git checkout -b util-branch util/master 子目录方式合并外部版本库 # 合并为子目录 git cat-file -p util-branch git checkout master # 更新index，检出到子目录(工作区)，保存index(暂存区) git read-tree --prefix=lib util-branch git checkout -- lib git write-tree # 2153518409d218609af40babededec6e8ef51616 (tree-id) git cat-file -p 2153518409d218609af40babededec6e8ef51616 # # 以revid为parents，对树 2153518409d218609af40babededec6e8ef51616 执行提交 git rev-parse HEAD # 911b1af2e0c95a2fc1306b8dea707064d5386c2e git rev-parse util-branch # 12408a149bfa78a4c2d4011f884aa2adb04f0934 echo \"subtree merge\" | \\ git commit-tree 2153518409d218609af40babededec6e8ef51616 \\ -p 911b1af2e0c95a2fc1306b8dea707064d5386c2e \\ -p 12408a149bfa78a4c2d4011f884aa2adb04f0934 # 62ae6cc3f9280418bdb0fcf6c1e678905b1fe690 (commitid) git reset 62ae6cc3f9280418bdb0fcf6c1e678905b1fe690 # 重置为master git cat-file -p HEAD # 显示parent tree 利用子树合并跟踪上游改动 # 获取远程版本库改动 git checkout util-branch git pull git checkout master # 使用subtree合并策略 git merge -s subtree util-branch git merge -Xsubtree=lib util-branch # git 1.7+ git log --graph --pretty=oneline 子树拆分 反向过程异常复杂,子树拆分的大致过程是： 找到要导出的目录的提交历史，并反向排序。 依次对每个提交执行下面的操作： 找出提交中导出目录对应的 tree id。 对该 tree id 执行 git commit-tree 。 执行 git commit-tree 要保持提交信息还要重新设置提交的 parents。 subtree目录拆分 # 1. Prepare the old repo pushd git subtree split -P -b popd #Note: must NOT contain leading or trailing characters btoa != ./btoa/ # 2. Create the new repo mkdir pushd git init git pull # 3. Link the new repo to Github or wherever git remote add origin git push origin -u master # 4. Cleanup, if desired popd # get out of pushd git rm -rf patch 补丁 diff标准补丁 git diff master > patch git apply patch git apply --check #查看补丁是否能够干净顺利地应用到当前分支中 git补丁 # 不仅有diff的信息，还有提交者，时间等等，直接可以发送的E-mail文件 skull@walker:boost_test(master) $ git format-patch -M fbb71ef 0001-add-boost_test-split-log-to-wiki-repo.patch 0002-clean-mod-for-apue.2e-repo.patch # -M选项表示这个patch要和那个分支比对，每次提交生成一个patch。 git am 0001-Fix1.patch #git am会给出提示，git am -3进行三方合并 Copyright © walker.zheng 2017 all right reserved，powered by Gitbook最近修改: 2017-10-10 16:05:16 "},"iptv.html":{"url":"iptv.html","title":"iptv","keywords":"","body":"iptv 相关架构 发布和体验流程 ismp结构 Copyright © walker.zheng 2017 all right reserved，powered by Gitbook最近修改: 2017-10-10 16:05:16 "},"markdown.html":{"url":"markdown.html","title":"markdown","keywords":"","body":"Cmd Markdown语法 基本语法 流程图 示例 st=>start: Start:>https://www.zybuluo.com io=>inputoutput: verification op=>operation: Your Operation cond=>condition: Yes or No? sub=>subroutine: Your Subroutine e=>end st->io->op->cond cond(yes)->e cond(no)->sub->io 序列图 示例 1 Alice->Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob-->Alice: I am good thanks! 示例 2 Title: Here is a title A->B: Normal line B-->C: Dashed line C->>D: Open arrow D-->>A: Dashed open arrow 甘特图 甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。 title 项目开发流程 section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5d section 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5d section 发布验收 发布: 2d 验收: 3d Mermaid 流程图 graph TD; A-->B; A-->C; B-->D; C-->D; Mermaid 序列图 Alice->John: Hello John, how are you? loop every minute John-->Alice: Great! end 表格支持 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234 定义型列表 名词 1 : 定义 1（左侧有一个可见的冒号和四个不可见的空格） 代码块 2 : 这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格） 代码块（左侧有八个不可见的空格） 待办事宜 Todo 列表 使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如： - [ ] **Cmd Markdown 开发** - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 - [ ] 支持以 PDF 格式导出文稿 - [x] 新增Todo列表功能 - [x] 改进 LaTex 功能 - [x] 修复 LaTex 公式渲染问题 - [x] 新增 LaTex 公式编号功能 - [ ] **七月旅行准备** - [ ] 准备邮轮上需要携带的物品 - [ ] 浏览日本免税店的物品 - [x] 购买蓝宝石公主号七月一日的船票 对应显示如下待办事宜 Todo 列表： [ ] Cmd Markdown 开发 [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 [ ] 支持以 PDF 格式导出文稿 [x] 新增Todo列表功能 [x] 改进 LaTex 功能 [x] 修复 LaTex 公式渲染问题 [x] 新增 LaTex 公式编号功能 [ ] 七月旅行准备 [ ] 准备邮轮上需要携带的物品 [ ] 浏览日本免税店的物品 [x] 购买蓝宝石公主号七月一日的船票 footnote. 这是一个 注脚 的 文本。 ↩ footnote2. 这是另一个 注脚 的 文本。 ↩ Copyright © walker.zheng 2017 all right reserved，powered by Gitbook最近修改: 2017-10-10 16:05:16 "},"python速查.html":{"url":"python速查.html","title":"python速查","keywords":"","body":" Python速查 Copyright © walker.zheng 2017 all right reserved，powered by Gitbook最近修改: 2017-10-10 16:05:16 "},"sourcetree.html":{"url":"sourcetree.html","title":"sourcetree","keywords":"","body":"sourcetree中gitflow & git log sourcetree工作区 暂存和提交 Copyright © walker.zheng 2017 all right reserved，powered by Gitbook最近修改: 2017-10-10 16:05:16 "},"work.html":{"url":"work.html","title":"work","keywords":"","body":"命令 新版本更新注意 配置文件格式变化，测试需根据旧配置修改，见图片注释 内控配置中json库改为 jsonProvider2 匹配中文 [\\u4e00-\\u9fa5] shell单行(部分需要管理员权限) redis 查看 核心数据总数 和 已完成数 for code in 0401 0501 0901 1502 1601 1602;do echo \" \"$code\":\";redis-cli scard $code\":data:done:\";redis-cli scard $code\":data:all:\";done 统计 key 个数 time redis-cli keys *|sed 's,:[^:]*$,:,'|sort|uniq -c 统计 set 个数 redis-cli keys *|sed 's,:[^:]*$,:,'|sort|uniq -c|grep ':data:'|awk '{print $2}'|xargs -i redis-cli scard {} webapi test curl -l -H \"Content-type: application/json\" -X POST -d @./json_body.json http://192.168.1.31:8080/iics/service/rest/alarm/uploadFailedNotifyResult 生成 emoji list echo \"### gogs emoji list\" >README.md LINE=\"\";COUNT=0;ls gogs/img/emoji/*|sed 's/gogs\\/img\\/emoji\\/\\(.*\\)\\.\\(.*\\)/![\\1](gogs\\/img\\/emoji\\/\\1.\\2) :\\1:/'|while read line;do (( COUNT+=1 )); (( ! (COUNT % 8) )) && { echo \" - $LINE\" ; LINE=\"\"; } || { LINE=\"$LINE $line\"; };done >> README.md kill进程 eval $(tasklist.exe |grep -ia er64.exe|awk '{print \"-PID \"$2}'|tr \"\\n\" \" \" |xargs.exe -i echo {}|sed 's/^/taskkill /') eval $(tasklist.exe |grep -ia er64.exe|grep analyseServer|awk '{print \"-PID \"$2}'|tr \"\\n\" \" \" |xargs.exe -i echo {}|sed 's/^/taskkill /') 卸载并安装 msiexec.exe -q -x $(reg query \"HKLM\\SOFTWARE\\Inforun\\analyseServer\"|grep ProductCode|awk '{print $3}') ; (cd /e/zmy/analyseServer/analyseServer/Release/msi && ls -t *.msi|sed -n '1p'|xargs -i msiexec.exe -q -i {}) 启动程序 eval $(find . -name '*64.exe'|grep vaS|sed 's#/vaS.*##g;s#\\./#/#g;s#^#(cd /e/zmy/analyseServer/analyseServer/analyseServer/tools#g;s#$# \\&\\& ./vaServer64.exe \\& >\\& /dev/null)#'|tr \"\\n\" \" \"|sed 's#) (#) \\&\\& (#g') eval $(find . -name '*64.exe'|grep analy|sed 's#/ana.*##g;s#\\./#/#g;s#^#(cd /e/zmy/analyseServer/analyseServer/analyseServer/tools#g;s#$# \\&\\& ./analyseServer64.exe \\& >\\& /dev/null)#'|tr \"\\n\" \" \"|sed 's#) (#) \\&\\& (#g') sftp同步最新文件 (echo \"cd /d/ftpInforun/businessData\";echo \"ls -lt\")|sftp -b - cs@192.168.1.100 |grep -v 'sftp>'|head -1|sed 's/.* //g;s#^#cd /d/ftpInforun/businessData\\nget #g'|sftp -b - cs@192.168.1.100 rsync 远程到本地 rsync -ravzP -e ssh cs@inforun:/home/cs/test/ test rsync -ravzP -e 'ssh -p 2222' cs@inforun:/home/cs/test/ test 本地到远程 rsync -ravzP -e ssh test cs@inforun:/home/cs/test/ rsync -ravzP -e 'ssh -p 2222' test cs@inforun:/home/cs/test/ tcp消息发送 echo '{\"messageType\":222}'|nc 127.0.0.1 7901;echo '{\"messageType\":222}'|nc 127.0.0.1 7902;echo '{\"messageType\":222}'|nc 127.0.0.1 7903;echo '{\"messageType\":222}'|nc 127.0.0.1 7904;echo '{\"messageType\":222}'|nc 127.0.0.1 7905;echo '{\"messageType\":222}'|nc 127.0.0.1 7906 echo '{\"messageType\":222}'|socat - TCP:localhost:7901 && echo '{\"messageType\":222}'|socat - TCP:localhost:7902 && echo '{\"messageType\":222}'|socat - TCP:localhost:7903 && echo '{\"messageType\":222}'|socat - TCP:localhost:7904 && echo '{\"messageType\":222}'|socat - TCP:localhost:7905 && echo '{\"messageType\":222}'|socat - TCP:localhost:7906 格式化打印 cat /c/Users/walker/Desktop/1.txt|while read line;do echo $line|sed 's/、/\\n/g'|awk '{printf \"%04d\\n\", $1}'|sort -n|uniq|tr \"\\n\" \" \";echo;done cat /e/zmy/analyseServer/analyseServer/analyseServer/riskpoint.xml|grep trans|sed 's###'|while read line; do echo $line|sed 's/,/ /g'; done |tr \" \" \"\\n\"|sort -n|uniq -c|sort -n 消息统计 ls /d/log/*.va.log|while read line; do echo $line|grep .;grep -E '消息 [发送|解析]' $line|awk -F# '{print $2}'|sed 's/].*//g'|sort|uniq -c; done 计算 总数 grep 核心数据总数 /d/log/log.rg.log|awk -F# '{print $2}'|awk '{print $1}'|tr \"\\n\" \"+\"|sed 's/+$/\\n/'|bc 删掉彩色 sed -r \"s/\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g\" sed \"s,\\x1B\\[[0-9;]*[a-zA-Z],,g\" 查看用的最多的命令 history |awk '{print $2}'|sort|uniq -c|sort -rn|head -10 行列转换 awk -F \" +\" '{for(i=1;i 计时 while true; do END=$(date +%s --date='17:30:00'); echo \"离17:30还有[\"$(( $END - $(date +%s) ))\"]秒\";sleep 1;done COUNT=0; while true;do echo $(( COUNT+=1 )) $(date +%T);sleep 30;done 统计 报警+失败 与 核心数据 对比 comm -3 报警 与 核心数据 对比 comm -3 是否创建任务 echo '5912377'|tr \"\\n\" \"|\"|sed 's/|$//'|xargs.exe -i grep --color -E ''{}'' 获取失败上传行号 grep -n '数据上传 FailedNotify' ./log.rg.log 失败任务是否最后分析成功 grep -n '数据上传 .*Alarm' ./log.rg.log|awk -F: '{print $1}'|sed 's/\\(.*\\)/\\1+5/g'|bc|sort|uniq|xargs.exe -i sed -n ''{}'p' ./log.rg.log|sed 's/.*\"bussinessCoreId\": //;s/,//g' grep -n '数据上传 FailedNotify' ./log.rg.log|awk -F: '{print $1}'|sed 's/\\(.*\\)/\\1+2/g'|bc|sort|uniq|xargs.exe -i sed -n ''{}'p' ./log.rg.log|sed 's/.*\"bussinessCoreId\": //;s/,//g' 新增报警成功数 count=0;stat=0;while true ; do (( count++ )); last=$stat;echo -e \"数据上传\\n\"|grep . --color; stat=$(grep -c 数据上传 /d/log/*.rg.log|tr \"\\n\" \":\"|sed 's/[^:]*log:/+/g;s/^+//;s/://g;'|xargs.exe -i echo '({})'|bc); echo $last $stat $(( $stat-$last ))\" \"$count;echo 'sleep for 3 sec';sleep 3; done SQL命令 核心数据 清理 delete t_business_data t where t.create_time like '2017-08-02%'; 更新上下班时间(2min) dev321 update t_work_time twt set twt.begin_date=sysdate,twt.end_date= sysdate+2,twt.work_begin_time=to_char(sysdate+2/24/60,'hh24:mi'),twt.work_end_time=to_char(sysdate+12/24/60,'hh24:mi'),twt.rest_starttime =to_char(sysdate+5/24/60,'hh24:mi'),twt.rest_endtime =to_char(sysdate+10/24/60,'hh24:mi') where twt.bank_id in (select twt.bank_id from t_work_time twt left join t_bank tb on twt.bank_id = tb.id where tb.bank_code in ('0501', '0901', '0401', '1602', '1502', '1601')); select * from t_work_time twt left join t_bank tb on twt.bank_id=tb.id where tb.bank_code in ('0501','0901','0401','1602','1502','1601'); dev update t_work_time twt set twt.begin_date=sysdate,twt.end_date= sysdate+2,twt.work_begin_time=to_char(sysdate+2/24/60,'hh24:mi'),twt.work_end_time=to_char(sysdate+12/24/60,'hh24:mi'),twt.rest_starttime =to_char(sysdate+5/24/60,'hh24:mi'),twt.rest_endtime =to_char(sysdate+10/24/60,'hh24:mi') where twt.bank_id in (select twt.bank_id from t_work_time twt left join t_bank tb on twt.bank_id = tb.id where tb.bank_code in ('0601','0701','0732','0733','0734','0735','3401','4101')); select * from t_work_time twt left join t_bank tb on twt.bank_id=tb.id where tb.bank_code in ('0601','0701','0732','0733','0734','0735','3401','4101'); 修改分析 ip port select * from t_facilities tf inner join t_bank tb on tf.bank_id=tb.id where tf.ip='192.168.1.31' and tb.bank_code in ('0501','0901','0401','1602','1502','1601'); select * from t_bank tb where tb.bank_code in ('0501','0901','0401','1602','1502','1601'); select * from t_facilities tf where tf.ip='192.168.1.31' for update select tf.f_code, tf.ip , tf.port from t_facilities tf inner join t_bank tb on tf.bank_id=tb.id where tf.ip='192.168.1.31' and tb.bank_code in ('0401','0501','0901','1502','1601','1602') for update 一键更新基本需求 1. 安装为服务 定时拉取,监听通知 curl(下载), msiexec(安装,更新),启动,安装日志上传 强制更新 日志上传, db记录 2. 安装卸载(管理员权限 静默) msiexec /i analyseServer-x64-1.2.42.msi /qb /l+ install.log msiexec /i analyseServer-x64-1.2.42.msi /qr /l+ install.log msiexec /i analyseServer-x64-1.2.42.msi /passive /l+ install.log msiexec /x analyseServer-x64-1.2.42.msi /qb /l+ install.log msiexec /x analyseServer-x64-1.2.42.msi /qr /l+ install.log msiexec /x analyseServer-x64-1.2.42.msi /passive /l+ install.log 工具和库 include去重 g++ -H foo.C |& awk '{print $2}' | sort | uniq -c | grep -v ' 1 ' gogs 下载 windows_amd64_mws.zip(含服务注册) 编辑custom/conf/app.ini mysql 建表 DROP DATABASE IF EXISTS gogs; CREATE DATABASE IF NOT EXISTS gogs CHARACTER SET utf8 COLLATE utf8_general_ci; ./gogs.exe web 启动成功，则说明正常 注册成windows服务 sc create gogs start= auto binPath= \"\"C:\\gogs\\gogs.exe\" web --config \"C:\\gogs\\conf\\app.ini\"\" json 序列化 :%s/\\(.*\\)/j[\"\\1\"] = data.\\1;/g :%s/\\(.*\\)/if (j.find(\"\\1\") != j.end())\\r{\\rdata.\\1 = j[\"\\1\"];\\r}\\r/g 搜索 taskid 发送信息:TaskID:.*thumbnail.jpg 任务 结果[上报] [alarm]: taskID[ thumbnail.jpg 配置修改 内控 D:\\xampp\\tomcat\\webapps\\iics\\WEB-INF\\classes\\config.properties jdbc.url=jdbc:oracle:thin:@192.168.1.100:1521:BANK4 jdbc.username=dev jdbc.password=dev321 versionUrl=http://192.168.1.31:8080/doc/ versionPath=E:\\\\zmy\\\\analyseServer\\\\analyseServer\\\\Release\\\\msi pushDataTime=60000 D:\\xampp\\tomcat\\webapps\\iics\\WEB-INF\\classes\\spring-hibernate.xml 核心数据推送 核心数据文件更名为 当前日期 核心数据文件 日期替换为 昨天日期 修改 tomcat 文件config.properties 中推送时间为解析后一分钟 pushDataTime=60000 修改 tomcat 文件spring-hibernate.xml 中 cronExpression 的value 为 当前时间 之后 几分钟 启动 tomcat 启动 vaServer 清理 redis 数据 flushdatabase 或者 redis-cli flushall 启动 analyseServer mkgh.sh #! /usr/bin/bash gitbook install > /dev/null gitbook init > /dev/null && gitbook build > /dev/null git add . git commit -a -m 'build gh' git checkout gh-pages git pull origin gh-pages --rebase cp -R _book/* . git add . git commit -a -m \"update gh\" git clean -fx _book git push origin gh-pages git checkout master git clean -fx _book git push rock.sh #! /usr/bin/bash # by walker VERSION='v0.0.4 by walker' CURR_DIR=$(pwd) ### 待配置 BANKCODE=( 0401 0501 0901 1502 1601 1602 ) # 机构码 列表 MSI_DIR='/e/zmy/analyseServer/analyseServer/Release/msi' # 分析服务器 版本目录，会安装最新版本 TOMCAT='/d/xampp/tomcat/bin/startup.bat' # tomcat启动脚本 CONFIG_FILE='/d/xampp/tomcat/webapps/iics/WEB-INF/classes/spring-hibernate.xml' # 内控配置 修改 核心数据解析时间(03 02 01) 为 当前时间2min后 OLD_FILE='/d/2017-06-01.txt' # 核心数据 文件 sleep_time=30 # 30sec等待 (tomcat完全启动) parse_time=2 # 2min后解析核心数据 (tomcat完全启动) va_PORT=64000 # 算法 端口 notify_PORT=7900 # 分析服务器 监听端口(内控通知端口) HEARTBEAT=30 # 心跳间隔 URL='http://192.168.1.31:8080/inforunws/service/rest' # 内控URL ### 以下 不要修改 MSI_FILE=$(cd $MSI_DIR && ls -t *.msi|sed -n '1p') # 当前目录下 最新msi DATA_FILE=\"/d/\"$(date +%Y-%m-%d)\".txt\" # 生成新的核心数据 SRC_DIR='/c/Program Files/Inforun/analyseServer' # 分析服务器 安装目录 LOG_DIR='D:/Log' # 分析服务器 日志目录 default_notify_PORT=7900 # 配置文件默认设置 default_va_PORT=64000 # 配置文件默认设置 redis_PORT=6379 # redis 端口 ############# function usage() { cat '$default_va_PORT'#'$(($va_PORT + $COUNT))'#' build/$arg/vaServer.xml sed -i 's#'$default_va_PORT'#'$(($va_PORT + $COUNT))'#' build/$arg/analyseServer64.xml sed -i 's#'$default_notify_PORT'#'$(($notify_PORT + $COUNT))'#' build/$arg/analyseServer64.xml sed -i 's#.*#'$arg'#' build/$arg/analyseServer64.xml sed -i 's#.*#'$URL'#' build/$arg/analyseServer64.xml sed -i 's#.*#'$HEARTBEAT'#gi' build/$arg/analyseServer64.xml sed -i 's#.*#'$HEARTBEAT'#gi' build/$arg/vaServer.xml echo -e $arg\"\\t\\t\"$(($va_PORT + $COUNT))\"\\t\\t\"$(($notify_PORT + $COUNT))\"\\t\\t$LOG_DIR/$arg.rg.log\" done } function modconfig() { TIME=$(date +%S\" \"%M\" \"%H --date=\"$parse_time minutes\") TIME_ECHO=$(date +%X --date=\"$parse_time minutes\") echo '修改配置' $DATA_FILE|grep --color=always . && cp $OLD_FILE $DATA_FILE && sed -i 's#|\\(2017/[^|]*\\)#|'\"$(date +%Y/%m/%d --date='1 day ago')\"'#' $DATA_FILE && sed -n '1p' $DATA_FILE echo '修改配置' $CONFIG_FILE '核心数据解析时间:' $TIME_ECHO \"(\"$parse_time \"min之后)\"|grep --color=always . && ([ -f ${CONFIG_FILE}.bak ] && [ $(grep -F 'property name=\"cronExpression\" value=\"03 02 01' ${CONFIG_FILE}.bak|wc -l) == 1 ]) && (cp $CONFIG_FILE{.bak,} && sed -i 's#\\(property name=\"cronExpression\" value=\"\\)\\(03 02 01\\)#\\1'\"$TIME\"'#' $CONFIG_FILE )|| ( ([ -f ${CONFIG_FILE}.bak ] && rm -rf ${CONFIG_FILE}.bak)|( ISOK=$(grep -F 'property name=\"cronExpression\" value=\"03 02 01' $CONFIG_FILE|wc -l) && [ $ISOK == 0 ] && echo \"脚本无法修改文件[$CONFIG_FILE]:检查到 核心数据解析时间不为 03 02 01\" || cp $CONFIG_FILE{,.bak} && sed -i 's#\\(property name=\"cronExpression\" value=\"\\)\\(03 02 01\\)#\\1'\"$TIME\"'#' $CONFIG_FILE) ) grep --color=always -n \"$TIME\" $CONFIG_FILE{,}|sort|uniq } function print_info() { echo '已启动副本进程' | grep --color=always . && ps -ef |grep --color=always 'build.*64' echo '通知监听端口' | grep --color=always . && echo $notify_PORT|sed -n 's#^\\(..\\).*#\\1#p'|xargs.exe -i grep --color=always '\\([[:digit:]]\\{1,3\\}\\.\\)\\{3\\}[[:digit:]]\\{1,3\\}:'{} 发布日志.md.bak; mv 发布日志.md{.bak,}) ) } function loop() { while true; do $0 $1;echo \"=========================================\"|GREP_COLOR='03;36' grep --color=always .; sleep 3;done } [ $# == 0 ] && $0 -h -k -s -m -t -a && exit until [ -z \"$1\" ] do [ -f \"$1\" ] && (echo '日志统计' $1|GREP_COLOR='01;32' grep --color=always . && grep -E 'waiting|推送|数据|上传|缓存|任务|报警|计划' \"$1\"|awk -F# '{print $2}'|sort|uniq -c|grep --color=always -E 'waiting|推送|数据|上传|缓存|任务|报警|计划' && grep '\\[E\\]' \"$1\"|awk -F# '{print $2}'|sort|uniq -c|GREP_COLOR='01;33' grep --color=always -E .) [ \"$1\" == \"-ll\" ] && (echo '监测日志统计'|grep --color=always . && loop -l) [ \"$1\" == \"-ls\" ] && (echo '监测处理速度' \"count/min(SMsgVATaskEndNotify)\"|grep --color=always . && loop --stat) [ \"$1\" == \"-le\" ] && (echo '监测日志错误' | grep --color=always . && loop -e) [ \"$1\" == \"-cc\" ] && (echo '显示克隆信息' | grep --color=always . && mkshow) [ \"$1\" == \"-l\" ] && ($0 /d/log/*.rg.log) [ \"$1\" == \"--stat\" ] && (for line in /d/log/*.rg.log; do echo -e $line|grep --color=always . ;time=$(grep -E '消息 处理\\[任务\\]\\[struct SMsgVATaskEndNotify' $line|sed -n '1p;$p'|sed 's/\\]\\[.*$//g;s/\\[//g'|xargs.exe -i date --date='{}' +%s|tr \"\\n\" \"-\"|sed 's/^/(0-(/;s#-$#))#;s/$/\\n/'|bc);count=$(grep -cE '消息 处理\\[任务\\]\\[struct SMsgVATaskEndNotify' $line);speed=$(echo \"(\"$count\"-1)*60/\"$time|bc);echo \"(\"$count\"-1)*60/\"$time\"=\"$speed;done;) [ \"$1\" == \"-e\" ] && (grep --color=always -n '\\[E\\]' /d/log/*.rg.log|sed 's/:.*:.*#/#/g'|sed 's/失败:.*/失败:/g;s/id:.*/id:/g'|sort|uniq -c| GREP_COLOR='01;32' grep --color=always '#.*';) [ \"$1\" == \"-a\" ] && ($0 -k -i -c -r -p) [ \"$1\" == \"-r\" ] && ($0 -1; echo '等待启动 5 sec'|grep --color=always . && sleep 5; $0 -2) [ \"$1\" == \"-h\" ] && (echo '挂载信息' | grep --color=always . && df -h && usage) [ \"$1\" == \"-n\" ] && ([ $# == 2 ] && notify $2 && exit || notify 222 && exit) [ \"$1\" == \"-m\" ] && modconfig [ \"$1\" == \"-p\" ] && print_info [ \"$1\" == \"-V\" ] && (echo -e 'rock' $VERSION | GREP_COLOR='01;36' grep --color=always .) [ \"$1\" == \"-v\" ] && version [ \"$1\" == \"-s\" ] && (echo '停止tomcat' | grep --color=always . && eval $(tasklist.exe |grep -ia 'java.exe'|awk '{print \"-PID \"$2}'|tr \"\\n\" \" \" |xargs.exe -i echo {}|sed 's/^/taskkill -F /')) [ \"$1\" == \"-t\" ] && (echo \"启动tomcat\"| grep --color=always . && $TOMCAT) && (echo \"等待tomcat完全启动(\"$sleep_time\" sec)\"| grep --color=always . && sleep $sleep_time ) [ \"$1\" == \"-k\" ] && (echo '杀死进程[vaServer64 & analyserServer64]'| grep --color=always . && eval $(tasklist.exe |grep -ia er64.exe|awk '{print \"-PID \"$2}'|tr \"\\n\" \" \" |xargs.exe -i echo {}|sed 's/^/taskkill -F /')) [ \"$1\" == \"-i\" ] && (echo '卸载并安装['$MSI_DIR\"/\"$MSI_FILE']'| grep --color=always . && (msiexec.exe -q -x $(reg query \"HKLM\\SOFTWARE\\Inforun\\analyseServer\"|grep ProductCode|awk '{print $3}') &> /dev/null );(cd $MSI_DIR && msiexec.exe -q -i $MSI_FILE) ) [ \"$1\" == \"-c\" ] && (echo '克隆副本' | grep --color=always . && mkcopy) [ \"$1\" == \"-1\" ] && (echo '启动所有vaServer64' | grep --color=always . && eval $(find . -name 'vaServer64.exe'|sed 's#/[^/]*$##;s/\\.//;s#^#(cd '\\'\"$CURR_DIR\"\\''#g;s#$# \\&\\& ./vaServer64.exe \\&> /dev/null \\&)#'|tr \"\\n\" \" \"|sed 's#) (#) \\&\\& (#g') ) [ \"$1\" == \"-2\" ] && (echo '启动所有analyserServer64' | grep --color=always . && eval $(find . -name 'analyseServer64.exe'|sed 's#/[^/]*$##;s/\\.//;s#^#(cd '\\'\"$CURR_DIR\"\\''#g;s#$# \\&\\& ./analyseServer64.exe \\&> /dev/null \\&)#'|tr \"\\n\" \" \"|sed 's#) (#) \\&\\& (#g')) [ \"$1\" == \"-x\" ] && [ \"$1\" == \"-x\" ] && (echo '过滤:' $2| grep --color=always . && WORD=$(echo $2|sed 's/\\[/\\\\\\[/g;s/\\]/\\\\\\]/g') && (for line in /d/log/*.rg.log; do echo $line|grep --color=always .;grep --color=always -E ''\"$WORD\"'' $line|awk -F# '{print $2}'|sort|uniq -c;done;)) shift done Copyright © walker.zheng 2017 all right reserved，powered by Gitbook最近修改: 2017-10-10 16:05:16 "},"工具.html":{"url":"工具.html","title":"工具","keywords":"","body":"书签 C/C++领域速度最快的程序诊断日志库 Pantheios 介绍 http://blog.csdn.net/lzy0168/article/details/7862933 effective-api-design http://www.infoq.com/presentations/effective-api-design API-Design-Best-Practices http://www.infoq.com/presentations/API-Design-Best-Practices STL体系结构 http://www.cnblogs.com/xkfz007/archive/2012/06/16/2551923.html 视频编解码理论 http://www.cnblogs.com/xkfz007/archive/2012/07/28/2613690.html 视频 编解码框架 http://www.cnblogs.com/xkfz007/archive/2012/07/29/2613824.html CPU与内存 http://www.cnblogs.com/xkfz007/archive/2012/10/08/2715163.html 工具 slickEdit ide代码浏览 Celerity 代码浏览分析 调试工具 windbg VLD umdh LeakDiag PE Insider Explorer Suite API Monitor Procdump64 perfmon 性能检测 processHacker httpAnalyzer 有用的工具 NSSM 服务安装 lambda-view js代码阅读 工具库 跨平台线程库 ZThread 多线程库 OpenThreads 开源 C++11 组件库 Folly 高性能的内核 Socket 实现 Fastsocket 高性能通信库 nanomsg Linux C++ 网络库 Muduo C++版的log4j log4cplus 纯C日志函数库 zlog C++日志框架 Google Glog C++ 异常堆栈跟踪器 libcsdbg Sonar logo代码质量管理平台 Sonar 优化的内存访问 TCMalloc C语言网络框架库 acl 代码构建工具 Bazel 分布式TCP压力测试工具 tcpcopy Phabricator logo可视化代码评审工具 Phabricator 代码审查review board 持续集成Jenkins Copyright © walker.zheng 2017 all right reserved，powered by Gitbook最近修改: 2017-10-10 16:05:16 "},"工作截图.html":{"url":"工作截图.html","title":"工作截图","keywords":"","body":"分析服务器配置文件说明 核心数据与基础数据关系 T+0任务时间表（触发相关风险点任务的启停） 任务下发和报警上传 失败、报警等上传 和 任务统计 日志说明 二期风险点 SFTP单行远程拷贝 代码结构 日志可视化 Copyright © walker.zheng 2017 all right reserved，powered by Gitbook最近修改: 2017-10-10 16:05:16 "},"计划.html":{"url":"计划.html","title":"计划","keywords":"","body":"目前nothing Copyright © walker.zheng 2017 all right reserved，powered by Gitbook最近修改: 2017-10-10 16:05:16 "},"配置.html":{"url":"配置.html","title":"配置","keywords":"","body":"windows必备 vs/cmake /msys2/cygwin/notepad++/stardict/Everything/BeyondCompare/strokeit sumatraPDF/KMSpico/MPC/7-zip/IrfanView/LICEcap/Evernote/WinCDEmu firefox/Chrome/迅雷/搜狗/QQ/网易云音乐/Office/Project/Visio XAMPP/redmine/gogs/gitweb/RedisDesktopManager/Github/setupFactory/AdvancedInstaller depends/procmon/procexp/vmmap/SpaceSniffer/PdgCntEditor/TinyPDF EASEUS firefox插件 adblock plus all-in-one sidebar DownThemAll Roomy Bookmarks Toolbar Tree Style Tab Video DownloaderHelper epubreader/markdownViewer/saveasPDF/evernote chrome插件 广告终结者 Video Downloader professional evernote vs安装库 vcpkg folly/boost vs插件 Advanced Installer 打包工具 Astyle 格式化 Github & Bitbucket 代码管理 Indent Guides 括号对齐 Visual Assist X Productivity Power Tools add exsiting projects批量添加项目 Visual Leak Detector/dr.memory clangfomart/pvs-studio cppcheck/cppclean/cinclude2dot ForceUTF8 with bom review assistant notepad++插件 JSTool Location Navigate Nppexport 彩色格式输出rtf Function list Session msys2 git/git-flow/gitbook/mercurial openssh/wget/curl/pacman/rsync:q autoconf/automake vim/gcc/sed/awk/bash-completion sshd cygwin sshd ssh-host-config 配置 添加 用户 cyg_server和sshd ssh-keygen 生成 rsa key /etc/sshd_config 中打开key验证 cygrunsrv: Error starting a service: QueryServiceStatus: Win32 error 1062: 解决办法 mkpasswd -l > /etc/passwd mkgroup -l > /etc/group cygrunsrv -R sshd ssh-host-config -y cygrunsrv -S sshd gogs GIT服务器web 下载windows版zip包 安装mysql，登录并建DB：mysql -u root; create database gogs; 安装openssh： cygwin中，ssh-host-config安装sshd服务，cygrunsrv -S sshd启动 安装gogs服务： sc create gogs start= auto binPath= \"\"C:\\gogs\\gogs.exe\" web --config \"C:\\gogs\\conf\\app.ini\"\" 启动服务： net start gogs localhost:3000配置web服务 markdown+gitbook 文档写作 sublime text/notepad++中，编写markdown文档，浏览器中预览： firefox安装markdown here插件，导出为html； firefox安装save as PDF插件，打印html为PDF； chrome虚拟打印机打印为PDF DocBlockr生成模板，编写文档; gitbook-cli编译生成markdown calibre(for ebook-convert)，并添加到PATH中； nodejs gitbook npm install gitbook-cli -g gitbook init && gitbook build && gitbook pdf gitbook install # 安装所需插件 gitbook serve doxygen+global+graphviz+htmlhelp+easy chm 注释文档化 gtags生成交叉引用； find . -name \"*.[ch]\" > gtags.files && gtags global浏览查找 global -u doxygen格式，生成文档 doxygen -g && doxygen EXTRACT_ALL = YES RECURSIVE = YES SOURCE_BROWSER = YES USE_HTAGS = YES DOXYFILE_ENCODING=GBK OUTPUT_LANGUAGE=chinese INPUT_ENCODING=GBK HAVE_DOT UML_LOOK CALL_GRAPH CALLER_GRAPH graphviz生成流程图； Easy chm 编译成chm文档，或者配置doxyfile打开chm生成选项 C++库： poco boost catch 测试 timing wheel (poco中有类似实现) event queue (poco中有类似实现) concurrentqueue cpp_redis single_file_libs cpp-netlib C++ samples： poco-examples modern-cpp-features awesome-modern-cpp boost （在mingw64编译） ./bootstrap.sh // 编译 bjam x64，不行就用 x64 vs cmd编译 修改 tools/build/v2/user-config.jam： `using gcc : : x86_64-w64-mingw32-g++.exe ;` 编译boost ./bjam target-os=windows architecture=x86 address-model=64 toolset=gcc ./b2 --toolset=gcc target-os=windows --build-dir=/cygdrive/c/whatever/boost_build variant=debug,release link=static runtime-link=static architecture=x86 address-model=64 threadapi=win32 --layout=tagged --without-mpi --stagedir=lib/win64gcc -j4 stage Copyright © walker.zheng 2017 all right reserved，powered by Gitbook最近修改: 2017-10-10 16:05:16 "},"图解.html":{"url":"图解.html","title":"图解","keywords":"","body":"常用IO模型和并发模式 任务 reactor & proactor Python速查 Git图解 Gitflow分支管理 git速查 lock选择 STL 容器选择 开源证书选择 设计模式 TCP状态图 regex FFmpeg结构图 Copyright © walker.zheng 2017 all right reserved，powered by Gitbook最近修改: 2017-10-10 16:05:16 "},"一天学会.html":{"url":"一天学会.html","title":"一天学会","keywords":"","body":"有哪些实用的计算机相关技能，可以在一天内学会？ 技术技能 版本控制：Git、Github 和 SVN (链接： Git – Getting Started ) 译注：推荐这个交互式的 Git 入门资源，号称 15 分钟就够了。入门课程推荐《版本管理工具介绍—Git篇》和《版本管理工具介绍—SVN篇》。 正则表达式 译注：推荐《55分钟学会正则表达式》 AWK 译注：《「sed & awk」读书笔记之 awk》 sed 译注：《「sed & awk」读书笔记之 sed》 Grep 学习如何用 Vim 做你从来不知道可以这样的事情 译注：推荐阅读《简明Vim练级攻略》和《25个Vim教程、视频和资源》 做一个爬虫，可以抓取一些网页并能解析一些基本数据 译注：向熟悉Python的朋友推荐这个爬虫框架《Scrapy：Python的爬虫框架》和一篇入门教程《Scrapy 轻松定制网络爬虫》 做一个更大的爬虫，必须填写一到两个表单 做一个简单的线性代数库(矩阵、向量、乘法) 向上面这个库中增加“奇异值分解” SVD 注：奇异值分解(singular value decomposition) 是线性代数中一种重要的矩阵分解. 向这个库中增加矩阵求逆 向这个库中增加最小二乘法 确保你的库能高效处理稀疏数据 学习如何使用 Python 中的列表 译注：推荐《Python入门》 注册一个StackOverflow帐号，学习如何使用该站点 阅读你最喜欢编程语言的手册 自己实现一个简单的机器学习算法，包括完整的流水线 译注：推荐阅读《国外程序员整理的机器学习资源大全》 学习如何在 Excel 中做一个简单的线图 安装Eclipse 学习 NoSQL 数据库的基本功能 译注：推荐阅读：《8种Nosql数据库系统对比》 学习 SQL 的大部分基本功能 译注：推荐阅读《十步完全理解SQL》 理解 SQL 和 NoSQL 之间的区别 (优点、弱点、限制，使用场景，如何使用，为什么，等等) 熟悉 Linux 系统 译注：推荐课程《Linux Guide for Developers》、《Linux达人养成计划 I》和《Linux达人养成计划 II》 学习一到两个排序算法。(快速排序和合并排序) 译注：推荐两个资源《VisuAlgo：通过动画学习算法和数据结构》、《旧金山大学数据结构和算法的可视化学习工具》 学习 D3.js 库 译注：推荐课程《使用D3制作图表》 学习给代码做单元测试 了解一些 AWS 服务，还有其 API (根据你的语言喜欢来选) 基本图论 一天一个算法 译注：推荐关注这个包括上百篇算法文章的列表。 理解分布式处理和分布式数据存储的需求和挑战 (basics of CAP Theorem, MapReduce 算法, MySQL 或 PostgreSQL 数据库的集群) 具体落实到 Python 译注：推荐《Python入门》 仔细阅读 Python 的内置函数，理解如何在命令行玩转这些内置函数 通过遵循Flask 指南或修改 Tornado 示例，来创建一个网站 学习 itertools 模块 玩一玩 CheckIO 译注：checkio是一个通过游戏学习编程的站点。另外，同时推荐另外一个寓学于乐的网站CodeCombat 学习如何编辑维基百科的文章，修改语法问题，或依照维基媒体的原则(比如观点中立) 来修改 学习用Markdown写作 学习 LaTeX、BibTex 和 pgfplots 学习如何在命令行下工作 译注：《每个Linux用户都应该了解的命令行省时技巧》 学习 JavaScript (Link: Eloquent JavaScript) 译注：推荐两门免费的课程《JavaScript入门篇》和《JavaScript进阶篇》 如果熟悉 OOP，那可以学习设计模式 译注：《23个设计模式的简明教程》 搞个树莓派板子深入研究 非技术的技能 搞搞园林 酿啤酒(译注：没条件的童鞋，推荐试试酿米酒) 体验远离计算机的生活 学电焊 学打字 约会 关于作者：aoi Copyright © walker.zheng 2017 all right reserved，powered by Gitbook最近修改: 2017-10-10 16:05:16 "}}